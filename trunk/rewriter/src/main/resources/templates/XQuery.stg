group XQuery;

generic(content) ::= <<
$content$
>>

main(date, queryBodies) ::= <<
(: -*- mode: xquery -*- :)
(: Created: $date$ :)
(: Generator: XSPARQL translator :)

$queryBodies;separator="\n"$
>>

queryBody(main) ::= <<
$main; separator=", \n"$
>>

namespace(name, value) ::= "declare namespace $name$ = $value$;"

defaultnamespace(value) ::= "declare default element namespace $value$;"

xmlElement(name, attributes, contents) ::= <<
<$name$$if(attributes)$ $attributes; separator=" "$$endif$>$contents$</$name$>
>>

xmlAttribute(name, value) ::= <<
$name$="$value$"
>>

flworExpr(forlets) ::= <<
$forlets$
>>

sqlWhereExpr(main) ::= <<
where $main$ 

>>

whereExpr(main) ::= <<
where $main$ 

>>

filterExpr(main) ::= <<
filter $main$
>>

orderExpr(main) ::= <<
order by $main$

>>

orderDecl(main) ::= <<
declare ordering $main$;

>>

returnExpr(main) ::= <<
return 
  $main$
>>

letClause(var, expr) ::= <<
let $var$ := $expr$

>>

instanceOf(test, type) ::= <<
$test$ instance of $type$
>>

forClause(var, type, at, in) ::= <<
for $var$$if(type)$ as $type$$endif$$if(at)$ at $at$$endif$ in $in$

>>

quantifiedExpr(op, vars, satisfies) ::= <<
$op$ $vars; separator=", "$ satisfies $satisfies$

>>

var(var, type, in) ::= <<
$var$$if(type)$ as $type$$endif$ in $in$
>>


par(content) ::= <<
($content; separator=", "$)
>>

rangeExpr(from, to) ::= <<
$from$ to $to$
>>

infixOpExpr(p1, p2, op) ::= <<
$p1$ $op$ $p2$
>>

returnClause(return) ::= <<
return $return$
>>

funcDecl(name, params, as, op, definition) ::= <<
declare function $name$ ($params; separator=", "$) $if(as)$ as $as$$if(op)$$op$$endif$$endif$ $if(definition)${$definition$}$else$ external $endif$;
>>

param(name, type, op) ::= <<
$name$$if(type)$ as $type$$if(op)$$op$$endif$$endif$
>>

funcCall(name, expr) ::= <<
$name$( $expr; separator=", "$ )
>>

xmlContents(content) ::= <<
{$content; separator=", \n"$}
>>

xmlContent(content) ::= <<
$content$
>>

objectClause(object) ::= <<
$object$
>>

orderByClause(expr) ::= <<
order by $expr$
>>

having(expr) ::= <<
" having ( $expr$ ) " 
>>

group_by(var) ::= <<
" group by $var$ " 
>>

moduleImport(mi1, mi2, mi3) ::= <<
import module $if(mi1)$namespace $mi1$ = $endif$$mi2$ 
                                at $mi3$;
>>

schemaImport(mi1, mi2, mi3) ::= <<
import schema namespace $mi1$ = $mi2$ 
                                at $mi3$;
>>

varDecl(v1, v2, v3) ::= <<
declare variable $v1$$if(v2)$ as $v2$$endif$ := $v3$;
>>

externalVarDecl(v1, v2) ::= <<
declare variable $v1$$if(v2)$ as $v2$$endif$ external;
>>

qstring(qs) ::= <<
"$qs$"
>>

defaultDecl(dd1, dd2, dd3) ::= <<
declare default $dd1$ $dd2$ $dd3$;
>>

optionDecl(dd1, dd2) ::= <<
declare option $dd1$ $dd2$;
>>

comment(comment) ::= <<

(: $comment$ :)

>>

triplessamesubject(subject, verbobject) ::= <<
$subject$, " " $verbobject; separator=", \" ; \" "$
>>

verbobject(verb, objects) ::= <<
, $verb$, " ", $objects; separator=", "$
>>

triples(triples) ::= <<
$triples; separator=", \".\", "$
>>

ifExpr(cond, then, elseExpr) ::= <<
if ($cond$) then
  $then$
  $if(elseExpr)$else $elseExpr$
$endif$
>>

