
import module namespace _xsparql = "http://xsparql.deri.org/xsparql.xquery"
at "http://xsparql.deri.org/xsparql.xquery";

declare namespace _sparql_result = "http://www.w3.org/2005/sparql-results#";

declare default element namespace "http://xmlns.com/foaf/0.1/";

declare namespace foaf = "http://xmlns.com/foaf/0.1/" ;
declare variable $_NS1 := "prefix  :  &#60;http://xmlns.com/foaf/0.1/&#62;";
declare variable $_NS2 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";

let $_aux1 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat(  $_NS1,  $_NS2, "
select $UID2 $X2 $Y2 from <http://xsparql.deri.org/data/relations.rdf>  where { [  :id    $UID2    ;  ]
  :hasGPSCoordinate [   :lat    $X2    ;  :long    $Y2    
  ]
  .   } ")))
for $_aux_result1 at $_aux_result1_Pos in doc($_aux1)//_sparql_result:result
	let $_UID2_Node := ($_aux_result1/_sparql_result:binding[@name = "UID2"])
	let $_UID2_NodeType := name($_UID2_Node/*)
	let $UID2 := data($_UID2_Node/*)
	let $_UID2_RDFTerm :=  _xsparql:_rdf_term($_UID2_NodeType, $UID2 )
	let $_X2_Node := ($_aux_result1/_sparql_result:binding[@name = "X2"])
	let $_X2_NodeType := name($_X2_Node/*)
	let $X2 := data($_X2_Node/*)
	let $_X2_RDFTerm :=  _xsparql:_rdf_term($_X2_NodeType, $X2 )
	let $_Y2_Node := ($_aux_result1/_sparql_result:binding[@name = "Y2"])
	let $_Y2_NodeType := name($_Y2_Node/*)
	let $Y2 := data($_Y2_Node/*)
	let $_Y2_RDFTerm :=  _xsparql:_rdf_term($_Y2_NodeType, $Y2 )

let $dist  := $X2  
order by $dist    return <user><user>{ $UID2   }</user><dist>{ $dist   }</dist></user>  
