
declare namespace foaf = "http://xmlns.com/foaf/0.1/" ;
import module namespace local = "http://xsparql.deri.org/xsparql.xquery"
at "http://xsparql.deri.org/xsparql.xquery";

declare namespace sparql_result = "http://www.w3.org/2005/sparql-results#";

declare variable $NS_1 := "prefix  :  &#60;http://xmlns.com/foaf/0.1/&#62;";
declare variable $NS_2 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";

let $aux1 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat(  $NS_1,  $NS_2, "
select $UID2 $X2 $Y2 from <http://www.polleres.net/xsparql/data/relations.rdf>  where { [  :id    $UID2    ;  ]
  :hasGPSCoordinate [   :lat    $X2    ;  :long    $Y2    
  ]
  . } ")))
for $aux_result1 at $aux_result1_Pos in doc($aux1)//sparql_result:result
	let $UID2_Node := ($aux_result1/sparql_result:binding[@name = "UID2"])
	let $UID2_NodeType := name($UID2_Node/*)
	let $UID2 := data($UID2_Node/*)
	let $UID2_RDFTerm :=  local:rdf_term($UID2_NodeType, $UID2 )
	let $X2_Node := ($aux_result1/sparql_result:binding[@name = "X2"])
	let $X2_NodeType := name($X2_Node/*)
	let $X2 := data($X2_Node/*)
	let $X2_RDFTerm :=  local:rdf_term($X2_NodeType, $X2 )
	let $Y2_Node := ($aux_result1/sparql_result:binding[@name = "Y2"])
	let $Y2_NodeType := name($Y2_Node/*)
	let $Y2 := data($Y2_Node/*)
	let $Y2_RDFTerm :=  local:rdf_term($Y2_NodeType, $Y2 )

let $dist  := $X2  order by $dist    return <user><user>{ $UID2   }</user><dist>{ $dist   }</dist></user>  
