declare namespace foaf = "http://xmlns.com/foaf/0.1/" ;
 declare namespace sparql_result = "http://www.w3.org/2005/sparql-results#"; 
declare variable $NS_1 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";

declare function local:rdf_term($NType as xs:string, $V as xs:string) as xs:string 
{ let $rdf_term := if($NType = "sparql_result:literal" or $NType = "literal") then fn:concat("""",$V,"""") 
  else if ($NType = "sparql_result:bnode" or $NType = "bnode") then fn:concat("_:", $V) 
  else if ($NType = "sparql_result:uri" or $NType = "uri") then fn:concat("<", $V, ">") 
  else "" 
  return $rdf_term  };

declare function local:empty($rdf_Predicate as xs:string,  $rdf_Object as xs:string) as xs:string 
{ let $output :=  if( fn:substring($rdf_Predicate, 0, 3) = "_:" or substring($rdf_Predicate, 0, 2) = """ or  
  substring($rdf_Predicate, fn:string-length($rdf_Predicate), fn:string-length($rdf_Predicate))   = """ ) then   " " 
  else  fn:concat($rdf_Predicate,  $rdf_Object) 
  return $output }; 


 fn:concat(  "  
@", $NS_1, ".", "
" ),

  for $knows at $knows_Pos  in doc("http://www.polleres.net/xsparql/data/relations.xml"   )  , 
 $nameA at $nameA_Pos  in $knows//person[1  ]/@name  , 
 $nameB at $nameB_Pos  in $knows//person[2  ]/@name  
 return 
	  fn:concat( 
		
 
"[",  "  foaf:name  ",   '"',   data($nameA   )   ,  '"',   ";",  "  a  ",    "  foaf:Person  ",    "]",
  "  foaf:knows  ",  "[",   "  foaf:name  ",   '"',   data($nameB   )   ,  '"',   ";",  "  a  ",    "  foaf:Person  ",    
  "]",
  ".&#xA;")
