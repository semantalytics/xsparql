
import module namespace _xsparql = "http://xsparql.deri.org/xsparql.xquery"
at "http://xsparql.deri.org/xsparql.xquery";

declare namespace _sparql_result = "http://www.w3.org/2005/sparql-results#";

declare namespace vc = "http://www.w3.org/2001/vcard-rdf/3.0#";
declare namespace foaf = "http://xmlns.com/foaf/0.1/";


declare variable $_NS1 := "prefix  vc:  &#60;http://www.w3.org/2001/vcard-rdf/3.0#&#62;";
declare variable $_NS2 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";

 fn:concat(  "  
@", $_NS1, ".", "  
@", $_NS2, ".", "
" ),

let $_aux1 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat(  $_NS1,  $_NS2, "
select $X $FN from <http://xsparql.deri.org/data/vCard.rdf>  where {    $X   vc:FN    $FN   .   } ")))
for $_aux_result1 at $_aux_result1_Pos in doc($_aux1)//_sparql_result:result
	let $_X_Node := ($_aux_result1/_sparql_result:binding[@name = "X"])
	let $_X_NodeType := name($_X_Node/*)
	let $_X_NodeDatatype := string($_X_Node/*/@datatype)
	let $_X_NodeLang := string($_X_Node/*/@lang)
	let $X := data($_X_Node/*)
	let $_X_RDFTerm :=  _xsparql:_rdf_term($_X_NodeType, $X, $_X_NodeLang, $_X_NodeDatatype )
	let $_FN_Node := ($_aux_result1/_sparql_result:binding[@name = "FN"])
	let $_FN_NodeType := name($_FN_Node/*)
	let $_FN_NodeDatatype := string($_FN_Node/*/@datatype)
	let $_FN_NodeLang := string($_FN_Node/*/@lang)
	let $FN := data($_FN_Node/*)
	let $_FN_RDFTerm :=  _xsparql:_rdf_term($_FN_NodeType, $FN, $_FN_NodeLang, $_FN_NodeDatatype )


 return 
	   
		
 
	 if ( _xsparql:_validSubject( "",  $_X_RDFTerm  ) ) then (
		 
		   
	  if ( _xsparql:_validObject( "",  $_FN_RDFTerm  ) ) then (
		 fn:concat( 
		 $_X_RDFTerm,  " foaf:name ", $_FN_RDFTerm, " .&#xA;"
		)
 ) else ""  

		 
  ) else "" 
