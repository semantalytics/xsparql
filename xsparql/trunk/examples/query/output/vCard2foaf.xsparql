

import module namespace local = "http://xsparql.deri.org/xsparql.xquery"
at "http://xsparql.deri.org/xsparql.xquery";

declare namespace sparql_result = "http://www.w3.org/2005/sparql-results#";

declare variable $NS_1 := "prefix  vc:  &#60;http://www.w3.org/2001/vcard-rdf/3.0#&#62;";
declare variable $NS_2 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";

 fn:concat(  "  
@", $NS_1, ".", "  
@", $NS_2, ".", "
" ),

let $aux1 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat(  $NS_1,  $NS_2, "
select $N $P $F from <http://www.polleres.net/xsparql/data/vCard.rdf>  where {    $P   vc:Given    $N   .    $P   vc:Family    $F   . } ")))
for $aux_result1 at $aux_result1_Pos in doc($aux1)//sparql_result:result
	let $N_Node := ($aux_result1/sparql_result:binding[@name = "N"])
	let $N_NodeType := name($N_Node/*)
	let $N := data($N_Node/*)
	let $N_RDFTerm :=  local:rdf_term($N_NodeType, $N )
	let $P_Node := ($aux_result1/sparql_result:binding[@name = "P"])
	let $P_NodeType := name($P_Node/*)
	let $P := data($P_Node/*)
	let $P_RDFTerm :=  local:rdf_term($P_NodeType, $P )
	let $F_Node := ($aux_result1/sparql_result:binding[@name = "F"])
	let $F_NodeType := name($F_Node/*)
	let $F := data($F_Node/*)
	let $F_RDFTerm :=  local:rdf_term($F_NodeType, $F )

let $validSubject1 := fn:concat("_:b", "_", data($aux_result1_Pos)) 
let $validObject2 := fn:concat( '"',   fn:concat($N   , " "   , $F   )   ,  '"') 

 return 
	   
		
 
	 if ( local:validSubject( "",  $validSubject1  ) ) then (
		 
		   
	  if ( local:validObject( "",  $validObject2  ) ) then (
		 fn:concat( 
		 $validSubject1,  " foaf:name ", $validObject2, " .&#xA;"
		)
 ) else ""  

		 
  ) else "" 
