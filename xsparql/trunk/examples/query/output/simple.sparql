
import module namespace _xsparql = "http://xsparql.deri.org/xsparql.xquery"
at "http://xsparql.deri.org/xsparql.xquery";

declare namespace _sparql_result = "http://www.w3.org/2005/sparql-results#";


declare variable $_NS1 := "prefix  :  &#60;http://www.example.org&#62;";

 fn:concat(  "  
@", $_NS1, ".", "
" ),

let $_aux1 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat(  $_NS1, "
select $s $p $x from <http://xsparql.deri.org/data/alice.ttl>  where {    $s     $p     $x   .   } ")))
for $_aux_result1 at $_aux_result1_Pos in doc($_aux1)//_sparql_result:result
	let $_s_Node := ($_aux_result1/_sparql_result:binding[@name = "s"])
	let $_s_NodeType := name($_s_Node/*)
	let $s := data($_s_Node/*)
	let $_s_RDFTerm :=  _xsparql:_rdf_term($_s_NodeType, $s )
	let $_p_Node := ($_aux_result1/_sparql_result:binding[@name = "p"])
	let $_p_NodeType := name($_p_Node/*)
	let $p := data($_p_Node/*)
	let $_p_RDFTerm :=  _xsparql:_rdf_term($_p_NodeType, $p )
	let $_x_Node := ($_aux_result1/_sparql_result:binding[@name = "x"])
	let $_x_NodeType := name($_x_Node/*)
	let $x := data($_x_Node/*)
	let $_x_RDFTerm :=  _xsparql:_rdf_term($_x_NodeType, $x )

let $_validObject1 := fn:concat("_:a", "_", data($_aux_result1_Pos)) 

 return 
	   
		
 
	 if ( _xsparql:_validSubject( "",  $_x_RDFTerm  ) ) then (
		 
		   
	  if ( _xsparql:_validObject( "",  $_validObject1  ) ) then (
		 fn:concat( 
		 $_x_RDFTerm,  " :p ", "[",  fn:concat(" ",$_x_RDFTerm, " ", $_validObject1, " &#59; "), " ]", " .&#xA;" 
		 ) 
 ) else ""  

		 
  ) else "" 
