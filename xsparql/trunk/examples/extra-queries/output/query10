

import module namespace local = "http://xsparql.deri.org/xsparql.xquery"
at "http://xsparql.deri.org/xsparql.xquery";

declare namespace sparql_result = "http://www.w3.org/2005/sparql-results#";

declare variable $NS_1 := "prefix  :  &#60;http://www.example.org&#62;";
declare variable $NS_2 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";

 fn:concat(  "  
@", $NS_1, ".", "  
@", $NS_2, ".", "
" ),

  
let $y  := "<http://www.example.org/knownPerson>, <http://www.example.org/knownPerson2>"  
let $aux1 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat(  $NS_1,  $NS_2, "
select $x from <http://www.polleres.net/foaf.rdf>  where {    $s   foaf:knows    $x   . } ")))
for $aux_result1 at $aux_result1_Pos in doc($aux1)//sparql_result:result
	let $x_Node := ($aux_result1/sparql_result:binding[@name = "x"])
	let $x_NodeType := name($x_Node/*)
	let $x := data($x_Node/*)
	let $x_RDFTerm :=  local:rdf_term($x_NodeType, $x )
 

let $validObject1 := fn:concat( '"',  $y,  '"') 



  return ( 
	 if ( local:validSubject( "",  $x_RDFTerm  ) ) then (
		 
		   
	 if ( local:validObject( "",  $validObject1  ) ) then (
		 fn:concat( 
		 $x_RDFTerm,  " a ", $validObject1, " .&#xA;"
		)
 ) else ""
		 
  ) else ""  )
