
import module namespace _xsparql = "http://xsparql.deri.org/XSPARQLer/xsparql.xquery"
at "http://xsparql.deri.org/XSPARQLer/xsparql.xquery";

declare namespace _sparql_result = "http://www.w3.org/2005/sparql-results#";

declare namespace bkrdf = "http://example.org/bookTicket#" ;
declare namespace bkxml = "http://example.com/bookTicket.xsd" ;
declare namespace tool = "http://example.com/tools" ;
declare function tool:locationLowering ( $node , $name ) { 
let $_aux1 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat(  $_NS1,  $_NS2,  $_NS3, "
select $city $country $station from <http://input.rdf>  where {  optional  {  $node  a  bkrdf:TrainStation  bkrdf:name  $station  bkrdf:isInCity  $cityNode  $cityNode  bkrdf:name  $city  bkrdf:isInCountry  $countryNode  $countryNode  bkrdf:name  $country    }  optional  {  $node  a  bkrdf:City  bkrdf:name  $city  bkrdf:isInCountry  $countryNode  $countryNode  bkrdf:name  $country    }   }  ")))
for $_aux_result1 at $_aux_result1_Pos in doc($_aux1)//_sparql_result:result
	let $_city_Node := ($_aux_result1/_sparql_result:binding[@name = "city"])
	let $_city_NodeType := name($_city_Node/*)
	let $_city_NodeDatatype := string($_city_Node/*/@datatype)
	let $_city_NodeLang := string($_city_Node/*/@lang)
	let $city := data($_city_Node/*)
	let $_city_RDFTerm :=  _xsparql:_rdf_term($_city_NodeType, $city, $_city_NodeLang, $_city_NodeDatatype )
	let $_country_Node := ($_aux_result1/_sparql_result:binding[@name = "country"])
	let $_country_NodeType := name($_country_Node/*)
	let $_country_NodeDatatype := string($_country_Node/*/@datatype)
	let $_country_NodeLang := string($_country_Node/*/@lang)
	let $country := data($_country_Node/*)
	let $_country_RDFTerm :=  _xsparql:_rdf_term($_country_NodeType, $country, $_country_NodeLang, $_country_NodeDatatype )
	let $_station_Node := ($_aux_result1/_sparql_result:binding[@name = "station"])
	let $_station_NodeType := name($_station_Node/*)
	let $_station_NodeDatatype := string($_station_Node/*/@datatype)
	let $_station_NodeLang := string($_station_Node/*/@lang)
	let $station := data($_station_Node/*)
	let $_station_RDFTerm :=  _xsparql:_rdf_term($_station_NodeType, $station, $_station_NodeLang, $_station_NodeDatatype )
 return element { $name   } { <bkrdf:location>                                                              <bkxml:country>{ $country   }</bkxml:country><bkxml:city>{ $city   }</bkxml:city>{ if ( $station   ) then <bkxml:station>{ $station   }</bkxml:station>   else ()   }</bkrdf:location>   }   } ;
declare variable $_NS1 := "prefix  bkrdf:  &#60;http://example.org/bookTicket#&#62;";
declare variable $_NS2 := "prefix  bkxml:  &#60;http://example.com/bookTicket.xsd&#62;";
declare variable $_NS3 := "prefix  tool:  &#60;http://example.com/tools&#62;";

let $_aux2 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat(  $_NS1,  $_NS2,  $_NS3, "
select $date $count $from $to from <http://input.rdf>  where {    $req    a  bkrdf:ReservationRequest   ;   bkrdf:time    $date    ;   bkrdf:from    $from    ;   bkrdf:to    $to    ;  bkrdf:passengerCount    $count    
  
  
  
 .   }  ")))
for $_aux_result2 at $_aux_result2_Pos in doc($_aux2)//_sparql_result:result
	let $_date_Node := ($_aux_result2/_sparql_result:binding[@name = "date"])
	let $_date_NodeType := name($_date_Node/*)
	let $_date_NodeDatatype := string($_date_Node/*/@datatype)
	let $_date_NodeLang := string($_date_Node/*/@lang)
	let $date := data($_date_Node/*)
	let $_date_RDFTerm :=  _xsparql:_rdf_term($_date_NodeType, $date, $_date_NodeLang, $_date_NodeDatatype )
	let $_count_Node := ($_aux_result2/_sparql_result:binding[@name = "count"])
	let $_count_NodeType := name($_count_Node/*)
	let $_count_NodeDatatype := string($_count_Node/*/@datatype)
	let $_count_NodeLang := string($_count_Node/*/@lang)
	let $count := data($_count_Node/*)
	let $_count_RDFTerm :=  _xsparql:_rdf_term($_count_NodeType, $count, $_count_NodeLang, $_count_NodeDatatype )
	let $_from_Node := ($_aux_result2/_sparql_result:binding[@name = "from"])
	let $_from_NodeType := name($_from_Node/*)
	let $_from_NodeDatatype := string($_from_Node/*/@datatype)
	let $_from_NodeLang := string($_from_Node/*/@lang)
	let $from := data($_from_Node/*)
	let $_from_RDFTerm :=  _xsparql:_rdf_term($_from_NodeType, $from, $_from_NodeLang, $_from_NodeDatatype )
	let $_to_Node := ($_aux_result2/_sparql_result:binding[@name = "to"])
	let $_to_NodeType := name($_to_Node/*)
	let $_to_NodeDatatype := string($_to_Node/*/@datatype)
	let $_to_NodeLang := string($_to_Node/*/@lang)
	let $to := data($_to_Node/*)
	let $_to_RDFTerm :=  _xsparql:_rdf_term($_to_NodeType, $to, $_to_NodeLang, $_to_NodeDatatype )
 return <bkxml:BookingRequest>                                                     <bkxml:dateTime>{ $date   }</bkxml:dateTime><bkxml:passengerCount>{ $count   }</bkxml:passengerCount>{ tool:locationLowering($from   , bkxml:start   )   }{ tool:locationLowering($to   , bkxml:destination   )   }</bkxml:BookingRequest>  
