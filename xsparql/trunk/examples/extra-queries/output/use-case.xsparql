
import module namespace _xsparql = "http://xsparql.deri.org/xsparql.xquery"
at "http://xsparql.deri.org/xsparql.xquery";

declare namespace _sparql_result = "http://www.w3.org/2005/sparql-results#";

declare  namespace xs = "http://www.w3.org/2001/XMLSchema#";
declare  namespace foaf = "http://xmlns.com/foaf/0.1/";
declare  namespace rdf = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
declare  namespace incontext = "http://www.in-context.eu/ontologies#";
declare  namespace foaf = "http://xmlns.com/foaf/0.1/";





declare variable $_NS1 := "prefix  xs:  &#60;http://www.w3.org/2001/XMLSchema#&#62;";
declare variable $_NS2 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";
declare variable $_NS3 := "prefix  rdf:  &#60;http://www.w3.org/1999/02/22-rdf-syntax-ns#&#62;";
declare variable $_NS4 := "prefix  incontext:  &#60;http://www.in-context.eu/ontologies#&#62;";
declare variable $_NS5 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";
<kml xmlns = "http://www.opengis.net/kml/2.2">{ 
let $_aux1 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat(  $_NS1,  $_NS2,  $_NS3,  $_NS4,  $_NS5, "
select $person $fn $ln $long $lat  where {    $person   rdf:type  foaf:Person  .    $person   incontext:id    $id   .    $person   incontext:hasGPSCoordinate    $gps   .    $gps   incontext:long    $long   .    $gps   incontext:lat    $lat   .    $person   foaf:firstName    $fn   .    $person   foaf:lastName    $ln   .  filter  (  $long      !=  """"      &amp;&amp;  $lat      !=  """"          )   } ")))
for $_aux_result1 at $_aux_result1_Pos in doc($_aux1)//_sparql_result:result
	let $_person_Node := ($_aux_result1/_sparql_result:binding[@name = "person"])
	let $_person_NodeType := name($_person_Node/*)
	let $person := data($_person_Node/*)
	let $_person_RDFTerm :=  _xsparql:_rdf_term($_person_NodeType, $person )
	let $_fn_Node := ($_aux_result1/_sparql_result:binding[@name = "fn"])
	let $_fn_NodeType := name($_fn_Node/*)
	let $fn := data($_fn_Node/*)
	let $_fn_RDFTerm :=  _xsparql:_rdf_term($_fn_NodeType, $fn )
	let $_ln_Node := ($_aux_result1/_sparql_result:binding[@name = "ln"])
	let $_ln_NodeType := name($_ln_Node/*)
	let $ln := data($_ln_Node/*)
	let $_ln_RDFTerm :=  _xsparql:_rdf_term($_ln_NodeType, $ln )
	let $_long_Node := ($_aux_result1/_sparql_result:binding[@name = "long"])
	let $_long_NodeType := name($_long_Node/*)
	let $long := data($_long_Node/*)
	let $_long_RDFTerm :=  _xsparql:_rdf_term($_long_NodeType, $long )
	let $_lat_Node := ($_aux_result1/_sparql_result:binding[@name = "lat"])
	let $_lat_NodeType := name($_lat_Node/*)
	let $lat := data($_lat_Node/*)
	let $_lat_RDFTerm :=  _xsparql:_rdf_term($_lat_NodeType, $lat )
 return <Placemark><name>{ fn:concat("Location of "   , $fn   , " "   , $ln   )   }</name><Point><coordinates>{ fn:concat($long   , ","   , $lat   , ",0"   )   }</coordinates></Point></Placemark>   }</kml>  
