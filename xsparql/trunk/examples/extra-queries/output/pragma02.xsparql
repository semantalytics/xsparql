
import module namespace _xsparql = "http://xsparql.deri.org/XSPARQLer/xsparql.xquery"
at "http://xsparql.deri.org/XSPARQLer/xsparql.xquery";

declare namespace _sparql_result = "http://www.w3.org/2005/sparql-results#";

declare namespace foaf = "http://xmlns.com/foaf/0.1/";

declare variable $_NS1 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";

 fn:concat(  "  
@", $_NS1, ".", "
" ),

  
let $_aux1 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat(  $_NS1, "
select $p $x from <http://www.polleres.net/foaf.rdf>  where {    $p   foaf:name    $x   .   }  ")))
for $_aux_result1 at $_aux_result1_Pos in doc($_aux1)//_sparql_result:result
	let $_p_Node := ($_aux_result1/_sparql_result:binding[@name = "p"])
	let $_p_NodeType := name($_p_Node/*)
	let $_p_NodeDatatype := string($_p_Node/*/@datatype)
	let $_p_NodeLang := string($_p_Node/*/@lang)
	let $p := data($_p_Node/*)
	let $_p_RDFTerm :=  _xsparql:_rdf_term($_p_NodeType, $p, $_p_NodeLang, $_p_NodeDatatype )
	let $_x_Node := ($_aux_result1/_sparql_result:binding[@name = "x"])
	let $_x_NodeType := name($_x_Node/*)
	let $_x_NodeDatatype := string($_x_Node/*/@datatype)
	let $_x_NodeLang := string($_x_Node/*/@lang)
	let $x := data($_x_Node/*)
	let $_x_RDFTerm :=  _xsparql:_rdf_term($_x_NodeType, $x, $_x_NodeLang, $_x_NodeDatatype )
 

let $_validObject1 := fn:concat( '"',   fn:lower-case($x   )   ,  '"') 



  return ( 
	 if ( _xsparql:_validSubject( "",  $_p_RDFTerm  ) ) then (
		 
		   
	  if ( _xsparql:_validObject( "",  $_validObject1  ) ) then (
		 fn:concat( 
		 $_p_RDFTerm,  " foaf:name ", $_validObject1, " .&#xA;"
		)
 ) else ""  

		 
  ) else ""  )
