
import module namespace _xsparql = "http://xsparql.deri.org/XSPARQLer/xsparql.xquery"
at "http://xsparql.deri.org/XSPARQLer/xsparql.xquery";

declare namespace _sparql_result = "http://www.w3.org/2005/sparql-results#";

declare namespace vc = "http://www.w3.org/2001/vcard-rdf/3.0#";
declare namespace foaf = "http://xmlns.com/foaf/0.1/";


declare variable $_NS1 := "prefix  vc:  &#60;http://www.w3.org/2001/vcard-rdf/3.0#&#62;";
declare variable $_NS2 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";

 _xsparql:_serialize((  "  
@", $_NS1, ".", "  
@", $_NS2, ".", "
" )),

let $_aux1 := _xsparql:_serialize(("http://localhost:2020/sparql?query=", fn:encode-for-uri( _xsparql:_serialize((  $_NS1,  $_NS2, "
select $N $P $F from <http://xsparql.deri.org/data/vCard.rdf>  where {    $P   vc:Given    $N   .    $P   vc:Family    $F   .  filter  (  isIRI  (  $F              )            )   }  ")))))
for $_aux_result1 at $_aux_result1_Pos in doc($_aux1)//_sparql_result:result
	let $_N_Node := ($_aux_result1/_sparql_result:binding[@name = "N"])
	let $_N_NodeType := name($_N_Node/*)
	let $_N_NodeDatatype := string($_N_Node/*/@datatype)
	let $_N_NodeLang := string($_N_Node/*/@lang)
	let $N := data($_N_Node/*)
	let $_N_RDFTerm :=  _xsparql:_rdf_term($_N_NodeType, $N, $_N_NodeLang, $_N_NodeDatatype )
	let $_P_Node := ($_aux_result1/_sparql_result:binding[@name = "P"])
	let $_P_NodeType := name($_P_Node/*)
	let $_P_NodeDatatype := string($_P_Node/*/@datatype)
	let $_P_NodeLang := string($_P_Node/*/@lang)
	let $P := data($_P_Node/*)
	let $_P_RDFTerm :=  _xsparql:_rdf_term($_P_NodeType, $P, $_P_NodeLang, $_P_NodeDatatype )
	let $_F_Node := ($_aux_result1/_sparql_result:binding[@name = "F"])
	let $_F_NodeType := name($_F_Node/*)
	let $_F_NodeDatatype := string($_F_Node/*/@datatype)
	let $_F_NodeLang := string($_F_Node/*/@lang)
	let $F := data($_F_Node/*)
	let $_F_RDFTerm :=  _xsparql:_rdf_term($_F_NodeType, $F, $_F_NodeLang, $_F_NodeDatatype )

let $_validSubject1 := _xsparql:_serialize(("_:b", "_", data($_aux_result1_Pos))) 
let $_validObject2 := _xsparql:_serialize(( '"',   fn:concat($N   , " "   , $F   )   ,  '"')) 

 return 
	   
		
 
	 if ( _xsparql:_validSubject( "",  $_validSubject1  ) ) then (
		 
		   
	  if ( _xsparql:_validObject( "",  $_validObject2  ) ) then (
		 _xsparql:_serialize(( 
		 $_validSubject1,  " foaf:name ", $_validObject2, " .&#xA;"
		))
 ) else ""  

		 
  ) else "" 
