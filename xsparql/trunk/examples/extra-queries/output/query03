
import module namespace _xsparql = "http://xsparql.deri.org/xsparql.xquery"
at "http://xsparql.deri.org/xsparql.xquery";

declare namespace _sparql_result = "http://www.w3.org/2005/sparql-results#";

declare  namespace vc = "http://www.w3.org/2001/vcard-rdf/3.0#";
declare  namespace foaf = "http://xmlns.com/foaf/0.1/";


declare variable $_NS1 := "prefix  vc:  &#60;http://www.w3.org/2001/vcard-rdf/3.0#&#62;";
declare variable $_NS2 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";

 fn:concat(  "  
@", $_NS1, ".", "  
@", $_NS2, ".", "
" ),

  
let $Y  := "blabla@blabla.xom"  

let $_aux1 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat(  $_NS1,  $_NS2, "
select $X $FName from <http://xsparql.deri.org/data/vCard.rdf>  where {    $X   vc:FN    $FName   .   } ")))
for $_aux_result1 at $_aux_result1_Pos in doc($_aux1)//_sparql_result:result
	let $_X_Node := ($_aux_result1/_sparql_result:binding[@name = "X"])
	let $_X_NodeType := name($_X_Node/*)
	let $X := data($_X_Node/*)
	let $_X_RDFTerm :=  _xsparql:_rdf_term($_X_NodeType, $X )
	let $_FName_Node := ($_aux_result1/_sparql_result:binding[@name = "FName"])
	let $_FName_NodeType := name($_FName_Node/*)
	let $FName := data($_FName_Node/*)
	let $_FName_RDFTerm :=  _xsparql:_rdf_term($_FName_NodeType, $FName )
 

let $_validObject1 := fn:concat( '"',   $Y   ,  '"') 



  return ( 
	 if ( _xsparql:_validSubject( "",  $_X_RDFTerm  ) ) then (
		 
		 
	   
	  if ( _xsparql:_validObject( "",  $_FName_RDFTerm  ) ) then (
		 fn:concat( 
		 $_X_RDFTerm,  " foaf:name ", $_FName_RDFTerm, " .&#xA;"
		)
 ) else ""  
,  
	   
	  if ( _xsparql:_validObject( "",  $_validObject1  ) ) then (
		 fn:concat( 
		 $_X_RDFTerm,  " foaf:mbox ", $_validObject1, " .&#xA;"
		)
 ) else ""  

		 
  ) else ""  )
