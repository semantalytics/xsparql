
import module namespace _xsparql = "http://xsparql.deri.org/XSPARQLer/xsparql.xquery"
at "http://xsparql.deri.org/XSPARQLer/xsparql.xquery";

declare namespace _sparql_result = "http://www.w3.org/2005/sparql-results#";

declare namespace foaf = "http://xmlns.com/foaf/0.1/";
declare namespace geo = "http://www.w3.org/2003/01/geo/wgs84_pos#";


declare variable $_NS1 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";
declare variable $_NS2 := "prefix  geo:  &#60;http://www.w3.org/2003/01/geo/wgs84_pos#&#62;";
<kml xmlns = "http://www.opengis.net/kml/2.2"> { 
let $_aux1 := _xsparql:_serialize(("http://localhost:2020/sparql?query=", fn:encode-for-uri( _xsparql:_serialize((  $_NS1,  $_NS2, "
select $person $fn $ln $long $lat from <file://sample_person_geodata.rdf>  where {    $person    a  foaf:Person   ;   foaf:firstName    $fn    ;   foaf:lastName    $ln    ;  foaf:based_near [   a  geo:Point   ;   geo:long    $long    ;  geo:lat    $lat    
  
  ]
   
  
  
 .   }  ")))))
for $_aux_result1 at $_aux_result1_Pos in doc($_aux1)//_sparql_result:result
	let $_person_Node := ($_aux_result1/_sparql_result:binding[@name = "person"])
	let $_person_NodeType := name($_person_Node/*)
	let $_person_NodeDatatype := string($_person_Node/*/@datatype)
	let $_person_NodeLang := string($_person_Node/*/@lang)
	let $person := data($_person_Node/*)
	let $_person_RDFTerm :=  _xsparql:_rdf_term($_person_NodeType, $person, $_person_NodeLang, $_person_NodeDatatype )
	let $_fn_Node := ($_aux_result1/_sparql_result:binding[@name = "fn"])
	let $_fn_NodeType := name($_fn_Node/*)
	let $_fn_NodeDatatype := string($_fn_Node/*/@datatype)
	let $_fn_NodeLang := string($_fn_Node/*/@lang)
	let $fn := data($_fn_Node/*)
	let $_fn_RDFTerm :=  _xsparql:_rdf_term($_fn_NodeType, $fn, $_fn_NodeLang, $_fn_NodeDatatype )
	let $_ln_Node := ($_aux_result1/_sparql_result:binding[@name = "ln"])
	let $_ln_NodeType := name($_ln_Node/*)
	let $_ln_NodeDatatype := string($_ln_Node/*/@datatype)
	let $_ln_NodeLang := string($_ln_Node/*/@lang)
	let $ln := data($_ln_Node/*)
	let $_ln_RDFTerm :=  _xsparql:_rdf_term($_ln_NodeType, $ln, $_ln_NodeLang, $_ln_NodeDatatype )
	let $_long_Node := ($_aux_result1/_sparql_result:binding[@name = "long"])
	let $_long_NodeType := name($_long_Node/*)
	let $_long_NodeDatatype := string($_long_Node/*/@datatype)
	let $_long_NodeLang := string($_long_Node/*/@lang)
	let $long := data($_long_Node/*)
	let $_long_RDFTerm :=  _xsparql:_rdf_term($_long_NodeType, $long, $_long_NodeLang, $_long_NodeDatatype )
	let $_lat_Node := ($_aux_result1/_sparql_result:binding[@name = "lat"])
	let $_lat_NodeType := name($_lat_Node/*)
	let $_lat_NodeDatatype := string($_lat_Node/*/@datatype)
	let $_lat_NodeLang := string($_lat_Node/*/@lang)
	let $lat := data($_lat_Node/*)
	let $_lat_RDFTerm :=  _xsparql:_rdf_term($_lat_NodeType, $lat, $_lat_NodeLang, $_lat_NodeDatatype )
 return <Placemark>         <name>{ fn:concat("Location of "   , $fn   , " "   , $ln   )   }</name><Point><coordinates>{ fn:concat($long   , ","   , $lat   , ",0"   )   }</coordinates></Point></Placemark>   } </kml>  
