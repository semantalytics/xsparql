
import module namespace _xsparql = "http://xsparql.deri.org/XSPARQLer/xsparql.xquery"
at "http://xsparql.deri.org/XSPARQLer/xsparql.xquery";

declare namespace _sparql_result = "http://www.w3.org/2005/sparql-results#";

declare namespace foaf = "http://xmlns.com/foaf/0.1/";

declare variable $_NS1 := "prefix  foaf:  &#60;http://xmlns.com/foaf/0.1/&#62;";

 fn:concat(  "  
@", $_NS1, ".", "
" ),

let $_aux1 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat(  $_NS1, "
select $N from <http://polleres.net/foaf.rdf>  where { [  foaf:knows [   a  foaf:Person   ;  foaf:name    $N    
  ]
   ;  ]
 .   }  ")))
for $_aux_result1 at $_aux_result1_Pos in doc($_aux1)//_sparql_result:result
	let $_N_Node := ($_aux_result1/_sparql_result:binding[@name = "N"])
	let $_N_NodeType := name($_N_Node/*)
	let $_N_NodeDatatype := string($_N_Node/*/@datatype)
	let $_N_NodeLang := string($_N_Node/*/@lang)
	let $N := data($_N_Node/*)
	let $_N_RDFTerm :=  _xsparql:_rdf_term($_N_NodeType, $N, $_N_NodeLang, $_N_NodeDatatype )


 return 
	   
		
 
	 if ( _xsparql:_validSubject( "",  $_N_RDFTerm  ) ) then (
		if ( _xsparql:_validPredicate( "",  $_N_RDFTerm  ) ) then (
		 
		 if ( _xsparql:_validObject( "",  $_N_RDFTerm  ) ) then (
		 fn:concat( 
		 $_N_RDFTerm,  " ", $_N_RDFTerm," ", $_N_RDFTerm, " .&#xA;"
		)
 ) else ""
		 
  ) else "" ) else "" 
