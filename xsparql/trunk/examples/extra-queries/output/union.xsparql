
import module namespace _xsparql = "http://xsparql.deri.org/xsparql.xquery"
at "http://xsparql.deri.org/xsparql.xquery";

declare namespace _sparql_result = "http://www.w3.org/2005/sparql-results#";


 fn:concat( "", "
" ),

let $_aux1 := fn:concat("http://localhost:2020/sparql?query=", fn:encode-for-uri( fn:concat("", "
select $S $P $O from <http://xsparql.deri.org/data/vCard.rdf>  where {  {  $S  $P  $O    }  union  {  $S  $P  $O    }   } ")))
for $_aux_result1 at $_aux_result1_Pos in doc($_aux1)//_sparql_result:result
	let $_S_Node := ($_aux_result1/_sparql_result:binding[@name = "S"])
	let $_S_NodeType := name($_S_Node/*)
	let $S := data($_S_Node/*)
	let $_S_RDFTerm :=  _xsparql:_rdf_term($_S_NodeType, $S )
	let $_P_Node := ($_aux_result1/_sparql_result:binding[@name = "P"])
	let $_P_NodeType := name($_P_Node/*)
	let $P := data($_P_Node/*)
	let $_P_RDFTerm :=  _xsparql:_rdf_term($_P_NodeType, $P )
	let $_O_Node := ($_aux_result1/_sparql_result:binding[@name = "O"])
	let $_O_NodeType := name($_O_Node/*)
	let $O := data($_O_Node/*)
	let $_O_RDFTerm :=  _xsparql:_rdf_term($_O_NodeType, $O )


 return 
	   
		
 
	 if ( _xsparql:_validSubject( "",  $_S_RDFTerm  ) ) then (
		 
		 if ( _xsparql:_validObject( "",  $_O_RDFTerm  ) ) then (
		 fn:concat( 
		 $_S_RDFTerm,  " $_P_RDFTerm ", $_O_RDFTerm, " .&#xA;"
		)
 ) else ""
		 
  ) else "" 
